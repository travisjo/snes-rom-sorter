#!/usr/bin/env python3

import argparse
import logging
import re

import os
import shutil
from os import listdir
from os.path import isdir, isfile, join

logging.basicConfig(format='%(levelname)s:%(message)s', level=logging.DEBUG)
logger = logging.getLogger()
logger.setLevel(20)

file_path = os.path.dirname(__file__)
unsorted_roms_folder = os.path.join(file_path, "Unsorted")
sorted_roms_folder = os.path.join(file_path, "Sorted")

everything_else_category = {
    'regex': ".*",
    'folder_name': "Everything Else",
    'move_file': True,
}

# https://github.com/asfdfdfd/GoodCodes/blob/master/GoodCodes%20(U)%20%5B!%5D.txt
categories = [
    {
        'regex': ".*\[p[0-9]+\].*",
        'folder_name': "Pirate",
        'move_file': True,
    },
    {
        'regex': ".*\[\!p\].*",
        'folder_name': "Pending Dump",
        'move_file': True,
    },
    {
        'regex': ".*\[\!\].*",
        'folder_name': "Verified Good Dump",
        'move_file': False,
    },
    {
        'regex': ".*\[a[0-9]+\].*",
        'folder_name': "Alternate",
        'move_file': False,
    },
    {
        'regex': ".*\[t[0-9]+\].*",
        'folder_name': "Trained",
        'move_file': False,
    },
    {
        'regex': ".*\[f[0-9]+\].*",
        'folder_name': "Fixed",
        'move_file': False,
    },
    {
        'regex': ".*\[T\-.+\].*",
        'folder_name': "OldTranslation",
        'move_file': False,
    },
    {
        'regex': ".*\[T\+.+\].*",
        'folder_name': "NewerTranslation",
        'move_file': False,
    },
    {
        'regex': ".*\[h.+\].*",
        'folder_name': "Hack",
        'move_file': False,
    },
    {
        'regex': ".*\(.*[Hh]ack.*\).*",
        'folder_name': "Hack",
        'move_file': False,
    },
    {
        'regex': ".*\(.*[Bb]eta.*\).*",
        'folder_name': "Hack",
        'move_file': False,
    },
]

ignore_categories = [
    {
        'regex': ".*[Bb][Ii][Oo][Ss].*",
        'reason': "BIOS file",  # I don't need BIOS files sorted into my games folder.
    },
    {
        'regex': ".*\[b.+\].*",
        'reason': "Bad Dump",
    },
    {
        'regex': ".*\[o[0-9]+\].*",
        'reason': "Overdump",
    },
]

regions = [
    {
        'regex': '.*\(1\).*',
        'folder_name': 'Japan and Korea',
    },
    {
        'regex': '.*\(A\).*',
        'folder_name': 'Australia',
    },
    {
        'regex': '.*\(C\).*',
        'folder_name': 'China',
    },
    {
        'regex': '.*\(E\).*',
        'folder_name': 'Europe',
    },
    {
        'regex': '.*\(F\).*',
        'folder_name': 'France',
    },
    {
        'regex': '.*\(FC\).*',
        'folder_name': 'French Canadian',
    },
    {
        'regex': '.*\(FN\).*',
        'folder_name': 'Finland',
    },
    {
        'regex': '.*\(G\).*',
        'folder_name': 'Germany',
    },
    {
        'regex': '.*\(GR\).*',
        'folder_name': 'Greece',
    },
    {
        'regex': '.*\(HK\).*',
        'folder_name': 'Hong Kong',
    },
    {
        'regex': '.*\(H\).*',
        'folder_name': 'Holland',
    },
    {
        'regex': '.*\(4\).*',
        'folder_name': 'USA and Brazil NTSC',
    },
    {
        'regex': '.*\(J\).*',
        'folder_name': 'Japan',
    },
    {
        'regex': '.*\(K\).*',
        'folder_name': 'Korea',
    },
    {
        'regex': '.*\(NL\).*',
        'folder_name': 'Netherlands',
    },
    {
        'regex': '.*\(PD\).*',
        'folder_name': 'Public Domain',
    },
    {
        'regex': '.*\(S\).*',
        'folder_name': 'Spain',
    },
    {
        'regex': '.*\(SW\).*',
        'folder_name': 'Sweden',
    },
    {
        'regex': '.*\(U\).*',
        'folder_name': 'USA',
    },
    {
        'regex': '.*\(UE\).*',
        'folder_name': 'USA and Europe',
    },
    {
        'regex': '.*\(UK\).*',
        'folder_name': 'England',
    },
    {
        'regex': '.*\(Unk\).*',
        'folder_name': 'Unknown Country',
    },
    {
        'regex': '.*\(I\).*',
        'folder_name': 'Italy',
    },
    {
        'regex': '.*\(Unl\).*',
        'folder_name': 'Unlicensed',
    },
]


def matches_category(rom_name, category):
    regex = re.compile(category['regex'])
    if regex.match(rom_name):
        return True
    return False


def matches_any_category(rom_name):
    for category in categories:
        if matches_category(rom_name, category):
            return True
    return False


def ignore_rom(rom_name):
    """
    Returns whether or not to ignore this rom file.
    """
    for category in ignore_categories:
        regex = re.compile(category['regex'])
        if regex.match(rom_name):
            return True, category['reason']
    return False, ''


def handle_rom_move(rom, category, sort_regions):
    """
    Actually moves the file.
    @returns number of files moved
    """
    logger.debug("{} matched {}, sorting into {}".format(rom, category['regex'], category['folder_name']))
    move_file = category['move_file']
    folder_name = category['folder_name']
    source_file = os.path.join(unsorted_roms_folder, rom)
    target_folder = os.path.join(sorted_roms_folder, folder_name)
    if sort_regions:
        for region in regions:
            region_regex = re.compile(region['regex'])
            if region_regex.match(rom):
                if not isdir(target_folder):
                    os.mkdir(target_folder)
                target_folder = os.path.join(target_folder, region['folder_name'])
                break
    target_file = os.path.join(target_folder, rom)
    if not isdir(target_folder):
        os.mkdir(target_folder)
    if not isfile(target_file):
        if move_file:
            os.rename(source_file, target_file)
        else:
            shutil.copyfile(source_file, target_file)
        return True
    return False


def sort_roms(sort_regions=True):
    """
    Sort roms into buckets configured however you'd like
    """
    stats = {}
    total_matched = 0
    # Initialize stats dict. This can't be done below because of the sorting mechanism we're using.
    for category in categories:
        stats[category['folder_name']] = 0
    stats[everything_else_category['folder_name']] = 0
    unmatched = 0

    for category in categories:
        logger.info("Searching for category {}".format(category))
        roms = [f for f in listdir(unsorted_roms_folder) if isfile(join(unsorted_roms_folder, f))]
        for rom in roms:
            ignore, reason = ignore_rom(rom)
            if not ignore:
                orphan = False
                sort_category = None
                if matches_category(rom, category):
                    sort_category = category
                elif not matches_any_category(rom):
                    sort_category = everything_else_category
                    orphan = True

                if sort_category:
                    moved = handle_rom_move(rom, sort_category, sort_regions)
                    stats[sort_category['folder_name']] += 1 if moved else 0
                    total_matched += 1 if moved else 0
                    unmatched += 1 if (moved and orphan) else 0
            else:
                logger.debug("Ignoring ROM {} for reason: {}".format(rom, reason))

    stats['Total'] = len(roms)
    stats['Total Matched'] = total_matched
    stats['Unmatched'] = unmatched
    return stats


def unsort_folder(parent_folder, folder_name):
    unsort_count = 0
    source_folder = os.path.join(parent_folder, folder_name)
    if isdir(source_folder):
        roms = [f for f in listdir(source_folder)]
        logger.debug('Moving {} ROMs from {}/{} back into Unsorted folder.'.format(len(roms), parent_folder, folder_name))
        for rom in roms:
            path = join(source_folder, rom)
            if isfile(path):
                target_file = os.path.join(unsorted_roms_folder, rom)
                logger.debug("{} -> {}".format(path, target_file))
                os.rename(path, target_file)
                unsort_count += 1
            elif isdir(path):
                unsort_count += unsort_folder(source_folder, rom)
    if isdir(source_folder):
        os.rmdir(source_folder)
    return unsort_count


def unsort_roms():
    """
    Move roms back into unsorted
    """
    print('Unsorting ROMs')
    unsort_count = 0
    for search in categories:
        folder_name = search['folder_name']
        unsort_count += unsort_folder(sorted_roms_folder, folder_name)
    logger.info("Unsorted {} files".format(unsort_count))


def main(*args, **kwargs):
    unsort_roms()
    results = sort_roms()
    print("Statistics ------")
    for k, v in results.items():
        print("{}: {}".format(k, v))


if __name__ == "__main__":
    main(*[], **{})
